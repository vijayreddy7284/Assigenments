 use mongo_practise
 db.createCollection("movies");
  show collections
  
  db.movies.insert({
  "title":"Fight Club",
  "writer":"Chuck Palahniuko",
  "year":1999,
  "actors":[
  "Brad Pitt","Edward Norton"
  ]
  })
  
  db.movies.insert({
  "title":"Pulp Fiction",
  "writer":"Quentin Tarantino",
  "year":1994,
  "actors":[
  "John Travolta","Uma Thurman"
  ]
  })
  
  db.movies.insert({
  "title":"Inglorious",
  "writer":"Quentin Tarantino",
  "year":2009,
  "actors":[
  "Brad Pitt","Diane Kruger","Eli Roth" 
  ]
  })
  
  db.movies.insert({
  "title":"The Hobbit: An Unexpected Journey",
  "writer" : "J.R.R. Tolkein",
  "year" : 2012,
  "franchise" : "The Hobbit"
  })
  
  db.movies.insert({
  "title":"The Hobbit: The Desolation of Smaug",
  "writer" : "J.R.R. Tolkein",
  "year" : 2013,
  "franchise" : "The Hobbit"
  })
  
  
  db.movies.insert({
  "title":"The Hobbit: The Battle of the Five Armies",
  "writer" : "J.R.R. Tolkein",
  "year" : 2012,
  "franchise" : "The Hobbit",
  "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
  })
  
  db.movies.insert({
  "title":"Pee Wee Herman's Big Adventure"
  })
  
  db.movies.insert({
  "title":"Avatar"
  })
  
  
  QUERY/FIND DOCUMENTS:
  
  1. get all documents
  sol:  db.movies.find({},{_id:0}).pretty()
  
  2. get all documents with writer set to "Quentin Tarantino"
  sol:  db.movies.find({writer:"Quentin Tarantino"},{_id:0}).pretty()
  
  3. get all documents where actors include "Brad Pitt"
  sol:  db.movies.find({actors:"Brad Pitt"},{_id:0}).pretty()
  
  4. get all documents with franchise set to "The Hobbit"
  sol:  db.movies.find({actors:"Brad Pitt"},{_id:0}).pretty()
  
  5. get all movies released in the 90s
  sol:  db.movies.find({year:{$gte:1900,$lt:2000}},{_id:0}).pretty()
  
  
  
  6. get all movies released before the year 2000 or after 2010
   sol:  db.movies.find({$or:[{"year":{$lt:2000}},{"year":{$gt:2010}}]},{_id:0}).pretty()
   
 -----------------------------------------------------------------------------
   UPDATE DOCUMENTS:
   
   1.
   sol: db.movies.update({title: "The Hobbit: An Unexpected Journey"},{$set:{synopsis:"Areluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
   
   2.
   sol: db.movies.update({title: "The Hobbit: The Desolation of Smaug"},{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
   
   3.
   
   sol:  db.movies.update({title:"Pulp Fiction"},{$set:{actors:"Samuel l.Jackson"}})
   
 -------------------------------------------------------------------------------
   TEXT SEARCH:
   
   1. find all movies that have a synopsis that contains the word "Bilbo"
   sol:  db.movies.find({"synopsis":/Bilbo/},{title:true,_id:0})
   
   
   
   2. find all movies that have a synopsis that contains the word "Gandalf"
   sol:  db.movies.find({"synopsis":/Gandalf/},{title:true,_id:0})


  3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
   sol:  db.movies.find({$and:[{"synopsis":/Bilbo/},{"synopsis":{$not:/Gandalf/}}]},{title:true,_id:0})
  
  
   4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit" 
   sol: db.movies.find({$or:[{"synopsis":/dwarves/},{"synopsis":/hobbit/}]},{title:true,_id:0})
   
   
   5. find all movies that have a synopsis that contains the word "gold" and "dragon"
   sol: db.movies.find({$and:[{"synopsis":/gold/},{"synopsis":/dragon/}]},{title:true,_id:0})
   
 -------------------------------------------------------------------------------------------------
 
 DELETE DOCUMENTS:
 
   1. delete the movie "Pee Wee Herman's Big Adventure"
   sol:  db.movies.remove({title:"Pee Wee Herman's Big Adventure"})
   
   2. delete the movie "Avatar"
   sol:  db.movies.remove({title:"Avatar"})
 
 --------------------------------------------------------------------------------------------------
 
 db.createCollection("users")
 
 db.users.insert({
 "username":"GoodGuyGreg",
 "first_name":"Good Guy",
 "last_name":"Greg",
 })
 
 
 db.users.insert({
 "username":"ScumbagSteve",
 "full_name":{first:"Scumbag", last:"Steve"}
 })
 
 db.createCollection("posts")
 
 
 db.posts.insert({
 "username":"GoodGuyGreg",
 "title":"Passes out at party",
 "body":"Wakes up early and cleans house"
 })
 
  
  db.posts.insert({
 "username":"ScumbagSteve",
 "title":"Borrows something",
 "body":"Sells it"
 })
 
 db.posts.insert({
 "username":"ScumbagSteve",
 "title":"Borrows everything",
 "body":"The end"
 })
 
 db.posts.insert({
 "username":"ScumbagSteve",
 "title":"Forks your repo on github",
 "body":"Sets to private"
 })

db.createCollection("comments")
 
db.comments.insert({
"username" : "GoodGuyGreg",
"comment" : "Hope you got a good deal!",
"post" : "5d5a9536e3cdb6280c45fd72"
})
where [post_obj_id] is the ObjectId of the posts document: "Borrows something"

db.comments.insert({
"username" : "GoodGuyGreg",
"comment" : "What's mine is yours!",
"post" : "5d5a9557e3cdb6280c45fd73"
})
where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"

db.comments.insert({
"username" : "GoodGuyGreg",
"comment" : "Don't violate the licensing agreement!",
"post" : "5d5a9586e3cdb6280c45fd74"
})
where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on
github



db.comments.insert({
"username" : "ScumbagSteve",
"comment" : "It still isn't clean",
"post" : "5d5a9488e3cdb6280c45fd6f"
})
where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"


db.comments.insert({
username : "ScumbagSteve",
comment : "Denied your PR cause I found a hack",
post : "5d5a94fbe3cdb6280c45fd71"})
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your
code"
  
   
   
 QUERYING RELATED COLLECTIONS:
   
  1. find all users
 Sol: db.users.find({},{_id:0}).pretty()
 
 2. find all posts
  Sol: db.posts.find({},{_id:0}).pretty()
  
 3. find all posts that was authored by "GoodGuyGreg"
 Sol: db.posts.find({username: "GoodGuyGreg"},{_id:0}).pretty()
 
 4. find all posts that was authored by "ScumbagSteve"
 Sol: db.posts.find({username: "ScumbagSteve"},{_id:0}).pretty()
 

 5. find all comments
 sol: db.comments.find({},{_id:0}).pretty()
 
 6. find all comments that was authored by "GoodGuyGreg"
  Sol: db.comments.find({username: "GoodGuyGreg"},{_id:0}).pretty()
 
 7. find all comments that was authored by "ScumbagSteve" 
 Sol: db.comments.find({username: "ScumbagSteve"},{_id:0}).pretty()
 
 8.find all comments belonging to the post "Reports a bug in your code"
 Sol: db.comments.find({post: "5d5a94fbe3cdb6280c45fd71"},{_id:0}).pretty() 
 
 
   